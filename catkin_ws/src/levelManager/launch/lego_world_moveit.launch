<?xml version="1.0"?>
<launch>
  <!-- Export env variable so that gazebo finds our models -->
  <env name="GAZEBO_MODEL_PATH"
       value="$(optenv GAZEBO_MODEL_PATH):$(find levelManager)/models:$(find levelManager)/lego_models" />

  <arg name="paused" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="sim" default="true" />
  <arg name="debug" default="false"/>
  <arg name="world_name" default="$(find levelManager)/worlds/main_scene.world" />

  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--arg name="world_name" default="worlds/empty.world"/-->
    <arg name="world_name" value="$(arg world_name)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="debug"      value="$(arg debug)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- send robot urdf to param server -->
  <param name="robot_description" command="xacro  '$(find ur_description)/urdf/ur5_robotiq85_gripper.urdf.xacro'"/>
  
  <!-- push robot_description to factory and spawn robot in gazebo -->
  <!--node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -z 0" respawn="false" output="screen"/-->

  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -param robot_description -model robot -z 0.743487 -Y -3.1415926535 -P 0.0 -R 0.0 
                  -J shoulder_pan_joint -1.58 
                  -J shoulder_lift_joint -1.58
                  -J elbow_joint -1.58 
                  -J wrist_1_joint -1.58 
                  -J wrist_2_joint 1.58 
                  -J wrist_3_joint 1.58"
        output="screen" />

  <!--CSDN控制器的特点就是分开写么  -->
  <!-- 加载控制器 好像是关节控制器-->
  <!--ur5的控制器 -->
  <!-- 抓手的控制器 -->
  <!-- <include file="$(find ur_gazebo)/launch/controller_utils.launch"/>
  <rosparam file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml" command="load"/>
  <rosparam file="$(find robotiq_gazebo)/controller/gripper_controller_robotiq.yaml" command="load"/>
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller gripper" respawn="false" output="screen"/> -->

  <!--控制器我先用LEGO原版  -->
  <!-- <include file="$(find ur5_gazebo)/launch/ur5_controllers.launch" /> -->

  <!-- 用英文老哥那套控制器, joint_state_controller  第三个是tf,有了tf才能坐标系转换 -->
  <rosparam file="$(find ur5_gripper_moveit_config)/config/gazebo_controllers.yaml" />
  <include file="$(find ur5_gripper_moveit_config)/launch/ros_controllers.launch"/>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Effort Controllers -->
<!--   <rosparam file="$(find ur5_single_arm_tufts)/controller/effort_controller.yaml" command="load"/>
  <node name="effort_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_effort_controller gripper_effort_controller" respawn="false" output="screen"/> -->

<!-- 启动moveit -->
  <include file="$(find ur5_gripper_moveit_config)/launch/ur5_moveit_planning_execution.launch">
    <arg name="debug" default="$(arg debug)" />
    <arg name="sim" default="$(arg sim)" />
  </include>

<!-- 启动rviz -->
  <include file="$(find ur5_gripper_moveit_config)/launch/moveit_rviz.launch">
    <arg name="debug" default="$(arg debug)" />
    <arg name="rviz_config" default="true" />
  </include>

</launch>
